1. kubectl run nginx --image nginx:latest
2. kubectl create deployment nginx --image nginx:latest --replicas 3
3. kubectl scale deployment nginx --replicas 5
===========================================================================

Expose a Service----------------------------
Now let’s make this NGINX server accessible.

Run the following command to create a service that’s exposed on a port of the Node running the Pods:

1. kubectl expose deployment/nginx --port 80 --type NodePort
service/nginx exposed

2. kubectl get services
3. kubectl delete service nginx
=========================================================================================================================
Cluster Info and Configuration================================

1. kubectl version:       ------- Gives information about what version of Kubernetes the client and server are on.
2. kubectl cluster-info:        Displays the endpoint of the Kubernetes control plane.
3. kubectl config get-contexts: ---Lists all the contexts present in the current kubeconfig.
4. kubectl config use-context <context name>: Allows you to set the default context for all the kubectl commands you’ll run.
========================================================================================================================================

Namespaces==========================================================================
kubectl get namespaces: Often, you’ll find that you’ve lost track of all the namespaces you’ve created. This command will help you out by listing them all.
kubectl create namespace <namespace name>: This command would create a new namespace for you. Note that it will not set that namespace as the default one, though. So all resources you create will still be created in the defaultnamespace unless you specify the --namespaceflag explicitly.
kubectl config set-context --current --namespace=<namespace name>: This allows you to change the default namespace for all the commands you’ll run while still keeping the same context. Just remember that the default namespace is called defaultin case you ever want to switch back.
kubectl delete namespace <namespace name>: This deletes the specified namespace and all resources under the namespace! The deletion of resources is an asynchronous process, so don’t be surprised if you see your namespace in the “Terminating” state for a while before it’s completely gone.

=======================================================================================
Pods, Deployments, Secrets, etc===============================
kubectl get X: Lists all resources of that particular type in the current namespace.
kubectl create X <name> <other properties>: Creates the “X” resource in the current namespace with the specified name. In most cases, you would have to specify some additional flags to actually create that particular resource.
kubectl delete X <name>: Deletes the “X” resource with the given name in the current namespace.
kubectl describe X <name>: You’ll find yourself using this one a lot when debugging things. This provides details and events related to the resource you specify.
kubectl edit X <name>: This command will allow you to edit the specified resource directly without having to deal with any YAML. Remember to make the changes to your YAMLs once you’re satisfied with your edits because the edits don’t persist once the resource gets deleted!

=================================================================================================================

Nodes=============================================

kubectl get nodes: Shows a list of all the nodes along with their role (control-plane, worker, etc.) and the version of K8s they are running.
kubectl top node <node name>: Shows the CPU and memory usage of the specified node.
kubectl cordon/uncordon node <node name>: Cordoning nodes means marking them as unschedulable; that is, no pods will be placed on that particular node. This is useful when you want to isolate a node for something like updating its version or debugging.
kubectl drain node <node name>: You’ll find yourself using this command when doing maintenance tasks for your cluster. Draining a node, cordons it as well, and deletes all pods running on it. If those pods are being managed by a Deployment, DaemonSet, etc., they will be recreated on the remaining nodes.



==================================================================================================================================================================================











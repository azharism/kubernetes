1. kubectl run nginx --image nginx:latest
2. kubectl create deployment nginx --image nginx:latest --replicas 3
3. kubectl scale deployment nginx --replicas 5
4. kubectl get namespaces
===========================================================================

Expose a Service----------------------------
Now let‚Äôs make this NGINX server accessible.

Run the following command to create a service that‚Äôs exposed on a port of the Node running the Pods:

1. kubectl expose deployment/nginx --port 80 --type NodePort
service/nginx exposed

2. kubectl get services
3. kubectl delete service nginx
=========================================================================================================================
Cluster Info and Configuration================================

1. kubectl version:       ------- Gives information about what version of Kubernetes the client and server are on.
2. kubectl cluster-info:        Displays the endpoint of the Kubernetes control plane.
3. kubectl config get-contexts: ---Lists all the contexts present in the current kubeconfig.
4. kubectl config use-context <context name>: Allows you to set the default context for all the kubectl commands you‚Äôll run.
========================================================================================================================================

Namespaces==========================================================================
kubectl get namespaces: Often, you‚Äôll find that you‚Äôve lost track of all the namespaces you‚Äôve created. This command will help you out by listing them all.
kubectl create namespace <namespace name>: This command would create a new namespace for you. Note that it will not set that namespace as the default one, though. So all resources you create will still be created in the defaultnamespace unless you specify the --namespaceflag explicitly.
kubectl config set-context --current --namespace=<namespace name>: This allows you to change the default namespace for all the commands you‚Äôll run while still keeping the same context. Just remember that the default namespace is called defaultin case you ever want to switch back.
kubectl delete namespace <namespace name>: This deletes the specified namespace and all resources under the namespace! The deletion of resources is an asynchronous process, so don‚Äôt be surprised if you see your namespace in the ‚ÄúTerminating‚Äù state for a while before it‚Äôs completely gone.

=======================================================================================
Pods, Deployments, Secrets, etc===============================
kubectl get X: Lists all resources of that particular type in the current namespace.
kubectl create X <name> <other properties>: Creates the ‚ÄúX‚Äù resource in the current namespace with the specified name. In most cases, you would have to specify some additional flags to actually create that particular resource.
kubectl delete X <name>: Deletes the ‚ÄúX‚Äù resource with the given name in the current namespace.
kubectl describe X <name>: You‚Äôll find yourself using this one a lot when debugging things. This provides details and events related to the resource you specify.
kubectl edit X <name>: This command will allow you to edit the specified resource directly without having to deal with any YAML. Remember to make the changes to your YAMLs once you‚Äôre satisfied with your edits because the edits don‚Äôt persist once the resource gets deleted!

=================================================================================================================

Nodes=============================================

kubectl get nodes: Shows a list of all the nodes along with their role (control-plane, worker, etc.) and the version of K8s they are running.
kubectl top node <node name>: Shows the CPU and memory usage of the specified node.
kubectl cordon/uncordon node <node name>: Cordoning nodes means marking them as unschedulable; that is, no pods will be placed on that particular node. This is useful when you want to isolate a node for something like updating its version or debugging.
kubectl drain node <node name>: You‚Äôll find yourself using this command when doing maintenance tasks for your cluster. Draining a node, cordons it as well, and deletes all pods running on it. If those pods are being managed by a Deployment, DaemonSet, etc., they will be recreated on the remaining nodes.



==================================================================================================================================================================================
1. kubectl get events  -------------View cluster events:
2. kubectl config view  ----------------View the kubectl configuration:
3. kubectl logs (pod-name)         ----to see the logs
4. kubectl delete service hello-node
5. kubectl delete deployment hello-node
6. /usr/local/bin/kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'^C   -----(for dashboard access)

==================================================================================================
kubectl get pods -o wide
kubectl describe pod (pod name)
1.kubctl get pods (podname)
2.kubectl get nods
3.kubectl apply -f pod.yml
4.kubectl get pods -o wide
5.kubectl describe pods (name)
6.kubectl delete pod (name)
7.kubectl logs -f (podname)
8.kubectl logs -f testpod -c c00
9.curl 172.16.0.1:80  (used to check port mapping of server it listen or not)

kubectl describe nodes
kubectl logs -f testpod
kubectl logs -f testpos -c c00   ----(c00 is container name)

========================================================================

annotations are use to describe specific message for pod why pod created...
===================================================================================
apiVersion: v1
kind: Pod
metadata:
  name: testpod
  annotations:
    description: our first testpod created
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello-Bhupinder; sleep 5 ; done"]
  restartPolicy: Always
====================================================================================================================


MULTI CONTAINER POD ENVIRONMENT 

kind: Pod
apiVersion: v1
metadata:
  name: testpod3
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Technical-Guftgu; sleep 5 ; done"]
    - name: c01
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello-Bhupinder; sleep 5 ; done"]

======================================================================================================================
kubectl get describe pod testpod3
kubectl logs -f testpod3 
kubectl logs -f testpod3 -c c00
kubectl exec testpod3 -it -c c00 /bin/bash   or  kubectl exec -it podname -- /bin/bash   or  kubectl exec testpod3 -it -c c00 -- /bin/bash
kubectl exec testpod3 -c c00 -- hostname -i  -------------(used to get the ip of the pod)
kubectl delete -f pod2.yml  or kubectl delete pod testpod

===========================================================================================================================
POD ENVIRONMENT  VARIABLES----------------------


kind: Pod
apiVersion: v1
metadata:
  name: environments
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello-Bhupinder; sleep 5 ; done"]
      env:                        # List of environment variables to be used inside the pod
      - name: MYNAME
        value: Azhar

========================================================
kubectl exec -it environments -- /bin/bash   ---(used to enter in pod)



=================================================================================================

POD WITH PORTS-----------------------------------------------------

kind: Pod
apiVersion: v1
metadata:
  name: testpod4
spec:
  containers:
    - name: c00
      image: httpd
      ports:
       - containerPort: 80  

--------------------------------------------
kubectl get pods -o wide
curl <ip address pod ip>:80
===============================================================================================================================

Service file explained----------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  selector:
    app: my-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
----------------------------------

kubectl get pods -n default    (used to see pods in namespaces)
kubectl create namespace manto
kubectl delete namespace manto
kubectl delete pod pod1 -n manto

========================================================================================

kubectl rollout status deployment my-webapp
# üëâ Deployment ka status check karne ke liye (update ho raha hai ya complete)

kubectl rollout history deployment my-webapp
# üëâ Deployment ki puri history dekhne ke liye (kitne revisions huye)

kubectl rollout history deployment my-webapp --revision=2
# üëâ Ek specific revision ka detail dekhne ke liye

kubectl rollout pause deployment my-webapp
# üëâ Deployment update ko pause karne ke liye

kubectl rollout resume deployment my-webapp
# üëâ Paused rollout ko resume karne ke liye

kubectl rollout undo deployment my-webapp
# üëâ Deployment ko rollback karna (previous stable revision pe wapas)

kubectl rollout undo deployment my-webapp --to-revision=2
# üëâ Specific revision number pe rollback karne ke liye

















